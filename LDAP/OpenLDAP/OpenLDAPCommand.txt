------------------------------------------《note_ldap-lwh.txt》------------------------------------------


#设置管理员账号和密码 以及 域名(树的根节点)
vim 01_rootdn.ldif 
		---------------------
dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=admin,dc=demo,dc=com
-
replace: olcSuffix
olcSuffix: dc=demo,dc=com
-
replace: olcRootPW
olcRootPW: <pass>
---------------------
vim 01_changeroot.sh 
		---------------------
		admin_pass=`slappasswd -s admin`
		echo "admin pass is:  ${admin_pass}"
		sed "s!<pass>!${admin_pass}!g"   rootdn.ldif > 01_tmp.ldif
		
		echo "备份默认配置"
		cp /etc/openldap/slapd.d/cn\=config/olcDatabase\=\{2\}hdb.ldif     \
		   /etc/openldap/slapd.d/cn\=config/olcDatabase\=\{2\}hdb.ldif.bak
		
		echo "将要修改的内容："
		cat 01_tmp.ldif
		
		ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f 01_tmp.ldif

		echo "修改后的变化"
		diff -Nur \
				/etc/openldap/slapd.d/cn\=config/olcDatabase\=\{2\}hdb.ldif    \
		     	/etc/openldap/slapd.d/cn\=config/olcDatabase\=\{2\}hdb.ldif.bak
		---------------------
bash changeroot.sh 
#使用 刚刚配置的管理员 尝试登陆
ldapsearch  -H ldapi:/// -D "cn=admin,dc=demo,dc=com" -w admin






#为schema导入几个常用的模板
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif 
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif 
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif 





#添加 组织结构
#树根       dn: dc=demo,dc=com
#总经理：       dn: cn=Manager,dc=demo,dc=com    
#部门1：        dn: ou=People,dc=demo,dc=com    
#部门2：        dn: ou=Group,dc=demo,dc=com    
cat 02_base.ldif 
---------------------
dn: dc=demo,dc=com
objectClass: top
objectClass: dcObject
objectClass: organization
o: ldap测试组织
dc: demo

dn: cn=Manager,dc=demo,dc=com
objectClass: organizationalRole
cn: Manager
description: 组织管理人

dn: ou=People,dc=demo,dc=com
objectClass: organizationalUnit
ou: People

dn: ou=Group,dc=demo,dc=com
objectClass: organizationalUnit
ou: Group
---------------------
ldapadd -x -D cn=admin,dc=demo,dc=com -w admin -f 02_base.ldif 
ldapmodify -a 等同于ldapadd
#使用管理员身份登陆，并查看dc=demo,dc=com树下的所有信息 可以看到新添加的条目
ldapsearch  -x -D cn=admin,dc=demo,dc=com -w admin -b "dc=demo,dc=com"







#添加各个子部门，并向各个部门中添加人员
    dn: ou=研发部门,ou=People,dc=demo,dc=com
        dn: ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
            dn: cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
            dn: cn=someone,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
        dn: ou=测试组,ou=研发部门,ou=People,dc=demo,dc=com
            dn: cn=tester.miao,ou=测试组,ou=研发部门,ou=People,dc=demo,dc=com
    dn: ou=HR,ou=People,dc=demo,dc=com
        dn: cn=fang.huang,ou=HR,ou=People,dc=demo,dc=com
cat 03_adduser.sh 
---------------------
dn: ou=研发部门,ou=People,dc=demo,dc=com
changetype: add
objectClass: organizationalUnit
ou: 研发部门

dn: ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
changetype: add
objectClass: organizationalUnit
ou: 后台组


dn: cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
changetype: add
objectClass: inetOrgPerson
cn: ryan.miao
departmentNumber: 1
sn: Miao
title: 大牛
mail: ryan.miao@demo.com
uid: 10000
displayName: 中文名


dn: cn=someone,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
changetype: add
objectClass: inetOrgPerson
cn: someone
departmentNumber: 1
sn: someone
title: Java工程师
mail: someone@demo.com
uid: 10001
displayName: 某人


dn: ou=测试组,ou=研发部门,ou=People,dc=demo,dc=com
changetype: add
objectClass: organizationalUnit
ou: 测试组


dn: cn=tester.miao,ou=测试组,ou=研发部门,ou=People,dc=demo,dc=com
changetype: add
objectClass: inetOrgPerson
cn: tester.miao
departmentNumber: 2
sn: Miao
title: 测试工程师
mail: tester@demo.com
uid: 10002
displayName: 测试某人


dn: ou=HR,ou=People,dc=demo,dc=com
changetype: add
objectClass: organizationalUnit
ou: HR


dn: cn=fang.huang,ou=HR,ou=People,dc=demo,dc=com
changetype: add
objectClass: inetOrgPerson
cn: fang.huang
departmentNumber: 3
sn: Huang
title: HRBP
mail: fang.huang@demo.com
uid: 10003
displayName: 黄芳
---------------------
ldapadd -x -D cn=admin,dc=demo,dc=com -w admin -f adduser.sh
#使用管理员账户  查询cn=ryan.miao
ldapsearch -x -D "admin的dn" -w "admin的密码" -b "basedn, 最外层的分组" "search filter:"
ldapsearch -x -D cn=admin,dc=demo,dc=com -w admin -b "dc=demo,dc=com" "cn=ryan.miao"
#查询时，指定返回的字段（不指定 则返回所有信息）（指定后，返回DN和指定的字段）
ldapsearch -x -D cn=admin,dc=demo,dc=com -w admin -b "ou=HR,ou=People,dc=demo,dc=com" cn uid displayName





#添加一个HR部门的职员，同时指定这个user的Password
	dn: cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com
cat 04_addoneHR.ldif 
---------------------
dn: cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com
changetype: add
objectClass: inetOrgPerson
cn: hr-ryan
userPassword: 123456
departmentNumber: 3
sn: hr-ryan
title: HRBP
mail: hr-ryan@demo.com
uid: 10004
displayName: 我是猎头
---------------------
#添加
ldapadd -x -D cn=admin,dc=demo,dc=com -w admin -f 04_addoneHR.ldif 
#查询 filter中使用了通配符'*'
ldapsearch -x -D cn=admin,dc=demo,dc=com -w admin -b dc=demo,dc=com "cn=hr-*"
#使用user和userPassword登陆和查询
ldapsearch -x -D cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com -w 123456 -b ou=HR,ou=People,dc=demo,dc=com "cn=hr-ryan*"
ldapsearch -x -D cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com -w 123456 												#登陆成功  但是不输出条目
ldapsearch -x -D cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com -w 123456 -b ou=HR,ou=People,dc=demo,dc=com 				#登陆成功，并输出ou=HR,ou=People,dc=demo,dc=com树下的所有条目
ldapsearch -x -D cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com -w 123456 -b ou=HR,ou=People,dc=demo,dc=com "cn=hr-ryan*"#登陆成功，并输出ou=HR,ou=People,dc=demo,dc=com树下的hr-ryan







#管理员-修改用户密码
ldapsearch -x -D cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com -w 123456 -b ou=People,dc=demo,dc=com "cn=ryan*"
#把密码 从123456 修改为ryanmiao的SSHA
#hash 最安全！！！
			[root@bogon ldap]# slappasswd -s ryanmiao
			{SSHA}XxffRVNnyAIKptGgpKWHtpztU/ahISwT
cat 05_updatepass.ldif 
---------------------
dn: cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
changetype: modify
replace: userPassword
userPassword: XxffRVNnyAIKptGgpKWHtpztU/ahISwT 
---------------------
#修改
ldapmodify -H ldap://192.168.122.24:389 -D cn=admin,dc=demo,dc=com -w admin -f 05_updatepass.ldif
ldapsearch -x -D cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com -w ryanmiao -b dc=demo,dc=com "cn=ryan.miao"
ldapsearch -x -D cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com -w ryanmiao -b dc=demo,dc=com "cn=ryan.miao" cn uid displayName







#user修改自己的密码（提示没有权限修改，添加权限）
#先备份默认设置
ldapsearch  -Y EXTERNAL -H ldapi:/// -b cn=config 'olcDatabase={2}hdb' > olcDatabase={2}hdb.def

#各个user的 userPassword  只能被 自己,管理员 修改
#各个user的 其他的全部信息  只能被 自己,管理员 修改，其他人只能读
---------------------
cat 06_acl.ldif 
dn: olcDatabase={2}hdb,cn=config
changetype: modify
# user can change self password, not allow anonymous access
add: olcAccess
olcAccess: {0}to attrs=userPassword
    by self write
    by anonymous auth
    by * none
-
# user can change self info
add: olcAccess
olcAccess: {1} to *
    by self write
    by * read
---------------------
ldapmodify -Y EXTERNAL -H ldapi:// -f 06_acl.ldif
#此时：user可以修改自己的密码
ldappasswd -x -h 192.168.122.24 -p 389 -D "cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com" -w ryanmiao -s 123456
ldappasswd -x -h 192.168.122.24 -p 389 -D "cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com" -w 123456   -s ryanmiao
#修改后，user使用ldapsearch验证能否正常登陆
ldapsearch -x -D cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com -w ryanmiao -b dc=demo,dc=com "cn=ryan.miao"




#添加memberof模块
	设定module的 cn
	指定module的 objectClass: olcModuleList ; 表示可以往这个moudule上挂module{...}了
	指定module的 olcModulePath: /usr/lib64/openldap ; 指定要加载的动态模块(xxx.la)的路径 
		添加第一个module：			dn: 	cn=module{0},cn=config
		表示要挂载一个动态模块：	 add: olcModuleLoad
		指定要挂载的动态模块的名字：  olcModuleLoad: memberof.la
			此处的memberof.la用于支持memberof功能
cat 071_add_module_group.sh 
---------------------
dn: cn=module,cn=config
cn: module
objectClass: olcModuleList
olcModulePath: /usr/lib64/openldap

dn: cn=module{0},cn=config
changetype: modify
add: olcModuleLoad
olcModuleLoad: memberof.la
---------------------
#执行
ldapadd -Q -Y EXTERNAL -H ldapi:/// -f 071_add_module_group.sh.sh
	adding new entry "cn=module,cn=config"
	modifying entry "cn=module{0},cn=config"



#向数据库olcDatabase={2}hdb中添加olcOverlay=memberof
cat 072_add_group_objectClass.sh
---------------------
dn: olcOverlay=memberof,olcDatabase={2}hdb,cn=config
objectClass: olcConfig
objectClass: olcMemberOf
objectClass: olcOverlayConfig
objectClass: top
olcOverlay: memberof
olcMemberOfDangling: ignore
olcMemberOfRefInt: TRUE
olcMemberOfGroupOC: groupOfNames
olcMemberOfMemberAD: member     
olcMemberOfMemberOfAD: memberOf
---------------------
#执行
ldapadd -Q -Y EXTERNAL -H ldapi:/// -f 072_add_group_objectClass.sh 
	adding new entry "olcOverlay=memberof,olcDatabase={2}hdb,cn=config"



#此时，可以添加group了
#组的结构如下
dn: cn=g-admin,ou=Group,dc=demo,dc=com
	member: cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
	member: cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com
cat 073_addgroup.ldif 
---------------------
dn: cn=g-admin,ou=Group,dc=demo,dc=com
objectClass: groupOfNames
cn: g-admin
member: cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
member: cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com
---------------------
#执行添加
ldapmodify -a -H ldap://192.168.122.24:389 -D "cn=admin,dc=demo,dc=com" -w admin -f addgroup.ldif 
	adding new entry "cn=g-admin,ou=Group,dc=demo,dc=com"

#查看Group下的各个group分别有哪些成员
ldapsearch -H ldapi:/// -x -D "cn=admin,dc=demo,dc=com" -w admin -b "ou=Group,dc=demo,dc=com"
#列出Group下的group
ldapsearch -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -b ou=Group,dc=demo,dc=com memberof

#查看People中的成员 
#	每个成员都属于什么Group
ldapsearch -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -b ou=People,dc=demo,dc=com memberof

#成员 cn=ryan.miao和cn=hr-ryan 分别属于什么Group
ldapsearch -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -b ou=People,dc=demo,dc=com "(|(cn=ryan.miao)(cn=hr-ryan))" memberof







#添加普通group，所有人都在这个组里
cat 074_add_commongroup.sh 
---------------------
dn: cn=g-users,ou=Group,dc=demo,dc=com
objectClass: groupOfNames
cn: g-users
member: cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
member: cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com
---------------------
#执行
ldapmodify -a -H ldap://192.168.122.24:389 -D cn=admin,dc=demo,dc=com -w admin -f 074_add_commongroup.sh
#查找：各个group下都有哪些member，并指定返回 dn member
ldapsearch -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -b dc=demo,dc=com -s sub "objectClass=groupOfNames" dn member
ldapsearch -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -b dc=demo,dc=com "objectClass=groupOfNames" dn member
# -LLL 去除无关信息
ldapsearch -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -b dc=demo,dc=com -s sub "objectClass=groupOfNames" dn member -LLL


#把剩下的用户加入到g-users这个group， 以后所有人加入的默认加入这个group。
cat 075_addUserToGroup.sh 
---------------------
dn: cn=g-users,ou=Group,dc=demo,dc=com
changetype: modify
add: member
member: cn=fang.huang,ou=HR,ou=People,dc=demo,dc=com
member: cn=hr-miao,ou=HR,ou=People,dc=demo,dc=com
member: cn=someone,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
member: cn=tester.miao,ou=测试组,ou=研发部门,ou=People,dc=demo,dc=com
---------------------
#执行
ldapmodify -x -H ldap:/// -D cn=admin,dc=demo,dc=com -w admin -f addUserToGroup.sh
#验证
ldapsearch -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -b dc=demo,dc=com -s sub "objectClass=groupOfNames"



#从Group中移除user
cat 076_removeUserFromGroup.sh 
---------------------
dn: cn=g-admin,ou=Group,dc=demo,dc=com
changetype: modify
delete: member
member: cn=ryan.miao,ou=后台组,ou=研发部门,ou=People,dc=demo,dc=com
---------------------
ldapmodify -x -H ldap:/// -D cn=admin,dc=demo,dc=com -w admin -f 076_removeUserFromGroup.sh
ldapsearch -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -b dc=demo,dc=com -s sub "objectClass=groupOfNames" dn member -LLL




group可以有多个user， user可以归属于多个group，是多对多的关系。
group有多个member字段， user有多个memberof字段。






acl的配置文件
	配置文件还是开始提到的，我们可以查看现有的配置：
		-------------------------------------------
		[root@localhost ldap]# ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config dn
		SASL/EXTERNAL authentication started
		SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
		SASL SSF: 0
		# extended LDIF
		#
		# LDAPv3
		# base <cn=config> with scope subtree
		# filter: (objectclass=*)
		# requesting: dn 
		#

		# config
		dn: cn=config

		# module{0}, config
		dn: cn=module{0},cn=config

		# schema, config
		dn: cn=schema,cn=config

		# {0}core, schema, config
		dn: cn={0}core,cn=schema,cn=config

		# {1}cosine, schema, config
		dn: cn={1}cosine,cn=schema,cn=config

		# {2}nis, schema, config
		dn: cn={2}nis,cn=schema,cn=config

		# {3}inetorgperson, schema, config
		dn: cn={3}inetorgperson,cn=schema,cn=config

		# {-1}frontend, config
		dn: olcDatabase={-1}frontend,cn=config

		# {0}config, config
		dn: olcDatabase={0}config,cn=config

		# {1}monitor, config
		dn: olcDatabase={1}monitor,cn=config

		# {2}hdb, config
		dn: olcDatabase={2}hdb,cn=config

		# {0}memberof, {2}hdb, config
		dn: olcOverlay={0}memberof,olcDatabase={2}hdb,cn=config

		# search result
		search: 2
		result: 0 Success

		# numResponses: 13
		# numEntries: 12
		[root@localhost ldap]# 
		-------------------------------------------
	acl就在dn: olcDatabase={2}hdb,cn=config, 我们可以查看具体的配置：
		-------------------------------------------
		[root@localhost ldap]# ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config 'olcDatabase={2}hdb'
		SASL/EXTERNAL authentication started
		SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
		SASL SSF: 0
		# extended LDIF
		#
		# LDAPv3
		# base <cn=config> with scope subtree
		# filter: olcDatabase={2}hdb
		# requesting: ALL
		#

		# {2}hdb, config
		dn: olcDatabase={2}hdb,cn=config
		objectClass: olcDatabaseConfig
		objectClass: olcHdbConfig
		olcDatabase: {2}hdb
		olcDbDirectory: /var/lib/ldap
		olcSuffix: dc=demo,dc=com
		olcRootDN: cn=admin,dc=demo,dc=com
		olcRootPW: {SSHA}bm3GXhNX29SeigIDAZRHszvJDZOtws0f
		olcDbIndex: objectClass eq,pres
		olcDbIndex: ou,cn,mail,surname,givenname eq,pres,sub
		olcAccess: {0}to attrs=userPassword   by self write   by anonymous auth   by *
		none
		olcAccess: {1} to *   by self write   by * read

		# search result
		search: 2
		result: 0 Success

		# numResponses: 2
		# numEntries: 1
		[root@localhost ldap]# 
		-------------------------------------------



#设置权限
cat 081_addacl.sh 
---------------------
dn: olcDatabase={2}hdb,cn=config
changetype: modify
# 只有自己可以修改密码， 不允许匿名访问, 允许g-admin组修改
add: olcAccess
olcAccess: {0}to attrs=userPassword 
        by self write 
        by anonymous auth 
        by group.exact="cn=g-admin,ou=Group,dc=demo,dc=com"  write 
        by * none
-
# 自己可以修改自己的信息，g-admin可以修改任何信息
add: olcAccess
olcAccess: {1}to * 
        by self write 
        by group.exact="cn=g-admin,ou=Group,dc=demo,dc=com"  write   
        by * none
---------------------
ldapmodify -H ldapi:/// -Y EXTERNAL -f 081_addacl.sh 


cat 082_adduser.sh 
---------------------
dn: cn=hr-miaoMiao,ou=HR,ou=People,dc=demo,dc=com
changetype: add
objectClass: inetOrgPerson
cn: hr-miaoMiao
userPassword: 123456
departmentNumber: 3
sn: hr-miaoMiao
title: HRBP
mail: hr-miaoMiao@demo.com
uid: 10006
displayName: 我是HR
---------------------
ldapmodify -a -H ldapi:/// -D cn=admin,dc=demo,dc=com -w admin -f 082_adduser.sh 

目前
	cn=hr-miaoMiao,ou=HR,ou=People,dc=demo,dc=com  是普通用户
	cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com      是g-admin用户

#可以看到 g-admin组的成员(hr-ryan)，可以查看别人的信息
ldapsearch -H ldap:/// -x -D cn=hr-ryan,ou=HR,ou=People,dc=demo,dc=com -w 123456 -b dc=demo,dc=com "cn=hr-ryan" dn memberof
#普通用户(hr-miaoMiao),只能连接
ldapsearch -H ldap:/// -x -D cn=hr-miaoMiao,ou=HR,ou=People,dc=demo,dc=com -w 123456 -b dc=demo,dc=com "cn=hr-miaoMiao" dn memberof
#可以看到，g-admin成员可以查询其他所有， 普通用户只能连接。




cat 083_update_self_pass.sh 
---------------------
dn: cn=hr-miaoMiao,ou=HR,ou=People,dc=demo,dc=com
changetype: modify
replace: userPassword
userPassword: miaoMiao
---------------------
ldapmodify -x -H ldap:/// -D cn=hr-miaoMiao,ou=HR,ou=People,dc=demo,dc=com -w 123456 -f 083_update_self_pass.sh		#更改密码	
ldapmodify -x -H ldap:/// -D cn=hr-miaoMiao,ou=HR,ou=People,dc=demo,dc=com -w 123456 -f 083_update_self_pass.sh		#使用原密码登陆失败
ldapmodify -x -H ldap:/// -D cn=hr-miaoMiao,ou=HR,ou=People,dc=demo,dc=com -w miaoMiao -f 083_update_self_pass.sh	#使用新密码登陆成功
				修改083_update_self_pass.sh 
					把dn修改为别人的dn ， 如：dn: cn=hr-ryan,ou=HR,ou=People,dc=myldap,dc=com
					此时利用083_update_self_pass.sh去修改别人的密码
ldapmodify -x -H ldap:/// -D cn=hr-miaoMiao,ou=HR,ou=People,dc=demo,dc=com -w miaoMiao -f 083_update_self_pass.sh	#修改别人的密码失败





总结ldap命令

	ldap主要命令有ldapadd, ldapmodify, ldapsearch. 我们用到的操作项有

	option          含义
	-H              ldap server地址，
						可以是ldap://192.168.122.24:389 表示tcp，
						可以是ldap:/// 表示本地的tcp，
						可以是ldapi:/// 本地unix socket连接
	-x              启用简单认证，通过-D dn -w 密码的方式认证
	-f              指定要修改的文件
	-a              使用ldapmodify增加一个entry的时候等同于ldapadd
	-b              basedn 根目录， 将在此目录下查询
	-Y EXTERNAL     本地执行，修改配置文件，比如basedn, rootdn,rootpw,acl, module等信息
	
	-------------------------------------------

	ldapadd: 添加一个entry
		添加schema配置
			ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif 
		添加额外的module
			ldapadd -Q -Y EXTERNAL -H ldapi:/// -f  add_module_group.sh
		添加普通entry
			ldapadd -x -D cn=admin,dc=demo,dc=com -w admin -f base.ldif
	
	-------------------------------------------

	ldapmodify: 修改entry
		更新配置信息
			ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f tmp.ldif
		对应的更新文件语法：
			dn: 要更新的entry的dn， (配置为: olcDatabase={2}hdb,cn=config)， (用户为: 用户dn)
			changetype: modify
			replace: olcRootDN   replace替换的字段
			olcRootDN: cn=admin,dc=demo,dc=com
			-
			replace: olcSuffix
			olcSuffix: dc=demo,dc=com
			-
			add: olcRootPW   add添加新的字段
			olcRootPW: <pass>

	-------------------------------------------
	
	ldapsearch: Search查询，主要集中在filter的使用上
		ldapsearch -H ldapi:/// -D cn=admin,cn=demo,cn=com -w admin -s sub "filter"  attr  [memberof]
			-s scope 指定查询范围， 有base|one|sub|children 
				主要用sub表示base之下的所有子目录。对应Python里的SUBTREE filter语法，正则语法。
				因为使用的时候传递过来的通常是username, 需要比较username在ldap中的字段， 
				比如(|(cn=Steve*)(sn=Steve*)(mail=Steve*)(givenName=Steve*)(uid=Steve*))
							范围可以是 base，one，subtree 或 children。
                                base     仅匹配 具有DN的条目(仅仅DN一个)，
                                one        匹配 其父代是 DN 的条目(这个DN的第一代儿子)，
                                subtree    匹配 子树中(树的根是DN)的所有条目(DN + 这个DN的所有儿子和后代)，
                                children   匹配 DN 下的所有条目(这个DN的所有儿子和后代，但不匹配DN自己)。
			attr 是要返回的字段， 必须返回的字段可以在配置文件里查看。
			memberof 非必须。





ACL 附录
	
	关于acl语法
		-------------------------------------------
		olcAccess: <access directive>
			<access directive> ::= to <what>
				[by <who> [<access>] [<control>] ]+
			<what> ::= * |
				[dn[.<basic-style>]=<regex> | dn.<scope-style>=<DN>]
				[filter=<ldapfilter>] [attrs=<attrlist>]
			<basic-style> ::= regex | exact
			<scope-style> ::= base | one | subtree | children
			<attrlist> ::= <attr> [val[.<basic-style>]=<regex>] | <attr> , <attrlist>
			<attr> ::= <attrname> | entry | children
			<who> ::= * | [anonymous | users | self
					| dn[.<basic-style>]=<regex> | dn.<scope-style>=<DN>]
				[dnattr=<attrname>]
				[group[/<objectclass>[/<attrname>][.<basic-style>]]=<regex>]
				[peername[.<basic-style>]=<regex>]
				[sockname[.<basic-style>]=<regex>]
				[domain[.<basic-style>]=<regex>]
				[sockurl[.<basic-style>]=<regex>]
				[set=<setspec>]
				[aci=<attrname>]
			<access> ::= [self]{<level>|<priv>}
			<level> ::= none | disclose | auth | compare | search | read | write | manage
			<priv> ::= {=|+|-}{m|w|r|s|c|x|d|0}+
			<control> ::= [stop | continue | break]
		-------------------------------------------


	关于acl中的who
		-------------------------------------------
		Table 6.3: Access Entity Specifiers

		Specifier       Entities
		*               All, including anonymous and authenticated users
		anonymous       Anonymous (non-authenticated) users
		users           Authenticated users
		self            User associated with target entry
		dn[.]=          Users matching a regular expression
		dn.=            Users within scope of a DN
		-------------------------------------------

	关于dn的授权
		-------------------------------------------
		For example, if the directory contained entries named:

			0: o=suffix
			1: cn=Manager,o=suffix
			2: ou=people,o=suffix
			3: uid=kdz,ou=people,o=suffix
			4: cn=addresses,uid=kdz,ou=people,o=suffix
			5: uid=hyc,ou=people,o=suffix
		Then:

			dn.base="ou=people,o=suffix" match 2; 					#base 			只匹配DN自己					
			dn.one="ou=people,o=suffix" match 3, and 5; 			#one  			匹配DN的第一代儿子
			dn.subtree="ou=people,o=suffix" match 2, 3, 4, and 5;	#sub/subtree  	匹配DN及DN所有的后代
			dn.children="ou=people,o=suffix" match 3, 4, and 5.		#children		匹配DN所有的后代

	一个acl示例
		-------------------------------------------
		# ACL1
		access to attrs=userpassword
			by self       write
			by anonymous  auth
			by group.exact="cn=itpeople,ou=groups,dc=example,dc=com" write
			by *          none
		# ACL2
		access to attrs=carlicense,homepostaladdress,homephone
			by self       write
			by group.exact="cn=hrpeople,ou=groups,dc=example,dc=com" write
			by *          none
		# ACL3
		access to *
			by self       write
			by group.exact="cn=hrpeople,ou=groups,dc=example,dc=com" write
			by users      read
			by *          none
		-------------------------------------------

------------------------------------------指令------------------------------------------
slaptest 			测试配置文件是否正确
ldapsearch -VV		查看OpenLDAP的版本
lapcat -v			查看所有的信息(树上的)






------------------------------------------《OpenLDAP-2.4-AdminGuide-ZH_EN》------------------------------------------
    slapd配置存储为 具有预定义schema(模式)和DIT的 特殊LDAP目录。
        有一些特定的objectClasses用于承载全局配置选项，模式定义，后端和数据库定义以及各种其他项目。
        
    slapd-config 配置树具有非常具体的结构。
        树的根名为 cn=config 并包含全局配置设置。
        其他设置包含在单独的子条目中
            Dynamically loaded modules      #module     # --enable-modules配置后才能使用该功能
            Schema definitions              #schema     # 包含了：从配置文件加载或者运行时添加的 user schema
            Backend-specific configuration              # 定义在数据库条目的子级(下一级)中
            Database-specific configuration #olcDatabase

配置树(configuration tree.)
                        -----------------------
                        |cn=config            |
                        |Global config options|
                        -----------------------
                                    |
                ------------------------------------------
                |                   |                    |
        ------------------   ---------------   ---------------------
        |cn=module{0}    |   |cn=schema    |   |olcDatabase={1}bdb |
        |A set of modules|   |System schema|   |A back-bdb instance|
        ------------------   ---------------   ---------------------
                                    |
                            ------------------
                            |                |
                    -------------   ---------------
                    |cn={0}core |   |cn={1}cosine |
                    |Core schema|   |COSINE schema|


LDIF 配置的总体布局如下：
        ----------------------------------
        # global configuration settings
        dn: cn=config
        objectClass: olcGlobal
        cn: config
        <global config settings>

        # schema definitions
        dn: cn=schema,cn=config
        objectClass: olcSchemaConfig
        cn: schema
        <system schema>

        dn: cn={X}core,cn=schema,cn=config
        objectClass: olcSchemaConfig
        cn: {X}core
        <core schema>

        # additional user-specified schema
        ...

        # backend definitions
        dn: olcBackend=<typeA>,cn=config
        objectClass: olcBackendConfig
        olcBackend: <typeA>
        <backend-specific settings>

        # database definitions
        dn: olcDatabase={X}<typeA>,cn=config
        objectClass: olcDatabaseConfig
        olcDatabase: {X}<typeA>
        <database-specific settings>

        # subsequent definitions and settings
        ...

        ----------------------------------

	#全局配置
    -------------cn=config
        -------------
        dn: cn=config
        objectClass: olcGlobal
        cn: config
        olcIdleTimeout: 30
        olcLogLevel: Stats
        olcReferral: ldap://root.openldap.org
        -------------

	#加载 动态模块
	-------------cn=module
        -------------
        dn: cn=module{0},cn=config
        objectClass: olcModuleList
        cn: module{0}
        olcModuleLoad: /usr/lib64/openldap/smbk5pwd.la

        dn: cn=module{1},cn=config
        objectClass: olcModuleList
        cn: module{1}
        olcModulePath: /usr/lib64/:/usr/lib64/openldap/
        olcModuleLoad: accesslog.la
        olcModuleLoad: pcache.la
        -------------
        



	#模式
    --------------------cn=schema
        -------------
        dn: cn=schema,cn=config
        objectClass: olcSchemaConfig
        cn: schema

        dn: cn=test,cn=schema,cn=config
        objectClass: olcSchemaConfig
        cn: test
        olcAttributeTypes: ( 1.1.1
          NAME 'testAttr'
          EQUALITY integerMatch
          SYNTAX 1.3.6.1.4.1.1466.115.121.1.27 )
        olcAttributeTypes: ( 1.1.2 NAME 'testTwo' EQUALITY caseIgnoreMatch
         SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.44 )
        olcObjectClasses: ( 1.1.3 NAME 'testObject'
         MAY ( testAttr $ testTwo ) AUXILIARY )
        -------------
            
	#后端
    --------------------olcBackend=<type>
	<type>是后端数据库类型
        -------------
        dn: olcBackend=bdb,cn=config
        objectClass: olcBackendConfig
        olcBackend: bdb
        -------------
		注意:
            这些指令通常不会出现在任何实际配置中。

	#数据库
    --------------------olcDatabase: [{<index>}]<type>
	[{<index>}] 可以省略 会自动生成
	<type>是后端数据库类型/前端数据库类型



#查看条目总数
ldapsearch -x -LLL | wc -l 

#把自己的公钥发给对方
ssh-keygen -t rsa 
ssh-copy-id -i ～/.ssh/id_rsa.pub    /..../
scp ori.xx copy.xx
bash -x 
tail -f /.../../xx.log



P502
5.2.5.8. olcSyncrepl


















---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------

















